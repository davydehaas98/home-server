version: "3.7"
services:
    ### Jenkins ###
    # Open source automation server
    jenkins-server:
        container_name: jenkins-server
        image: jenkins/jenkins:lts
        restart: unless-stopped
        ports:
            # Web Interface
            - "9090:8080"
            # Remote Java (JIRA) API
            - "50000:50000"
        environment:
            TZ: ${TZ}
            # Set maximum heap size to 4096 MB
            JAVA_OPTS: -Xmx4096m
            JENKINS_OPTS: --handlerCountMax=300
        volumes:
            - ~/jenkins:/var/jenkins_home
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - ci
            
    ### Jenkins JNLP Slave ###
    # Slave machine for executing jobs
    jenkins-slave:
        container_name: jenkins-slave
        image: jenkins/jnlp-slave:latest
        restart: unless-stopped
        environment:
            TZ: ${TZ}
            # Set maximum heap size to 2048 mb
            JAVA_OPTS: -Xmx2048m
            JENKINS_AGENT_NAME: slave
            JENKINS_URL: http://jenkins-server:50000
            JENKINS_SECRET: <secrettoken>
        depends_on:
            - jenkins-server
        networks:
            - ci
            
    ### TeamCity ###
    # Automation server by JetBrains
    teamcity-server:
        container_name: teamcity-server
        image: jetbrains/teamcity-server:latest
        restart: unless-stopped
        ports:
            - "8111:8111"
        environment:
            TZ: ${TZ}
            # Set maximum heap size to 2048 mb
            TEAMCITY_SERVER_MEM_OPTS: -Xmx2048m
        volumes:
            - ~/teamcity/data:/data/teamcity_server/datadir
            - ~/teamcity/logs:/opt/teamcity/logs
        #depends_on:
            #- postgresql
        networks:
            - ci
    
    ### TeamCity Agent ###
    # Build agent for executing jobs
    teamcity-agent:
        container_name: teamcity-agent
        image: jetbrains/teamcity-agent:latest
        restart: unless-stopped
        environment:
            TZ: ${TZ}
            SERVER_URL: http://teamcity-server:8111
        volumes:
            - ~/teamcity/agent:/data/teamcity_agent/conf
            - /var/run/docker.sock:/var/run/docker.sock
        depends_on:
            - teamcity-server
        networks:
            - ci

    ### SonarQube ###
    # Open source code quality and security tool
    sonarqube:
        container_name: sonarqube
        image: sonarqube:lts
        restart: unless-stopped
        stop_grace_period: 2m30s
        ports:
            - "9091:9000"
            # Embedded H2 database
            - "9092:9092"
        environment:
            PUID: ${PUID}
            PGID: ${PGID}
            TZ: ${TZ}
            sonar.jbdc.username: admin
            sonar.jbdc.password: admin
            sonar.jdbc.url: jdbc:postgresql://postgresql:5432/sonarqube
        volumes:
            - ~/sonarqube/config:/opt/sonarqube/conf
            - ~/sonarqube/extensions:/opt/sonarqube/extensions
            - ~/sonarqube/bundled-plugins:/opt/sonarqube/lib/bundled-plugins
            - ~/sonarqube/logs:/opt/sonarqube/logs
            - ~/sonarqube/data:/opt/sonarqube/data
        ulimits:
            nproc: 65535
            nofile:
                soft: 65535
                hard: 65535
        networks:
            - ci

    ### PostgreSQL ###
    # Database used by SonarQube
    postgresql:
        container_name: postgresql
        image: postgres:latest
        restart: unless-stopped
        shm_size: 256M
        #ports:
            #- "5432:5432"
        environment:
            PUID: ${PUID}
            PGID: ${PGID}
            TZ: ${TZ}
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: admin
            POSTGRES_MULTIPLE_DATABASES: teamcity,sonarqube
            #POSTGRES_DB: sonarqube
        volumes:
            - ~/postgresql:/var/lib/postgresql
            # This needs explicit mapping due to https://github.com/docker-library/postgres/blob/4e48e3228a30763913ece952c611e5e9b95c8759/Dockerfile.template#L52
            - ~/postgresql/data:/var/lib/postgresql/data
        networks:
            - ci
            
    ### Portainer ###
    # Web UI for Docker Containers. Usefull for managing the server
    # Not needed if you already have a Portainer installation on your server
    portainer:
        container_name: portainer
        image: portainer/portainer:latest
        restart: unless-stopped
        command: -H unix:///var/run/docker.sock
        ports:
            - "9000:9000"
        environment:
            PUID: ${PUID}
            PGID: ${PGID}
            TZ: ${TZ}
        volumes:
            - ~/portainer/data:/data
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - ci
networks:
    ci:
        driver: bridge
        name: ci

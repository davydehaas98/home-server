version: "3.9"
services:
  # Systems monitoring and alertingtoolkit
  prometheus:
    image: prom/prometheus:v2.49.1
    container_name: prometheus
    restart: unless-stopped
    cpus: 4
    mem_limit: 8192m
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    environment:
      - TZ=${TZ}
    volumes:
      - ${USER_DIR}/prometheus:/etc/prometheus
    # - ${USER_DIR}/prometheus/data:/prometheus
    expose:
      - 9090
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --quiet --tries=1 --spider https://prometheus.${DOMAIN_NAME}/-/healthy || exit 1"]
    #   interval: 60s
    #   timeout: 10s
    #   retries: 2
    labels:
      - diun.enable=true
      - diun.watch_repo=true
      - traefik.enable=true
      - traefik.http.routers.prometheus.entrypoints=websecure
      - traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_NAME}`)
      - traefik.http.routers.prometheus.middlewares=chain-authelia@file
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
    networks:
      - reverse-proxy
  # Prometheus Node Exporter exposes a wide variety of hardware- and kernel-related metrics.
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    restart: unless-stopped
    cpus: 0.1
    mem_limit: 128m
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    expose:
      - 9100
    labels:
      - diun.enable=true
      - diun.watch_repo=true
    networks:
      - reverse-proxy
  # Container Advisor analyzes and exposes resource usage and performance data from running containers
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    restart: unless-stopped
    cpus: 1
    mem_limit: 512m
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080
    labels:
      - diun.enable=true
      - diun.watch_repo=true
    networks:
      - reverse-proxy
  # The Alertmanager handles alerts sent by client applications such as the Prometheus server. 
  # It takes care of deduplicating, grouping, and routing them to the correct receiver integration such as email, PagerDuty, or OpsGenie. 
  # It also takes care of silencing and inhibition of alerts.
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    cpus: 1
    mem_limit: 1024m
    command:
      - --config.file=/etc/alertmanager/config.yml
      - --storage.path=/alertmanager
    volumes:
      - ${USER_DIR}/alertmanager/:/etc/alertmanager/
    expose:
      - 9093
    labels:
      - diun.enable=true
    networks:
      - reverse-proxy
networks:
  reverse-proxy:
    external: true
    name: reverse-proxy_default
